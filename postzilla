#!/usr/bin/python

###################################################################################
#                          postzilla.py  -  description
#                             -------------------
#    begin                : Apr  3, 2005
#    last update          : Jul 14, 2007
#    copyright            : (C) 2005, 2006, 2007 by Carlos Castillo and Luis Useche
#    email                : {carlos.d.castillo|useche}@gmail.com
#
###################################################################################
#     This file is part of Postzilla.
#
#     Postzilla is free software; you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation; either version 2 of the License, or
#     (at your option) any later version.
#
#     Foobar is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with Foobar; if not, write to the Free Software
#     Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
###################################################################################

from optparse import OptionParser

from threading import Thread
import threading

from progressbar import ProgressBar
from common import *

import signal, os
import sys

# Interrupted Exception
class InterruptedException(Exception):
    def __init__(self): pass

def main(option, url):
    #list of all the download instances
    down_instances = []

    #was interrupted by a Ctrl-C?
    interrupted = False

    #file name
    tmp = option.output
    if(tmp):
        filename = tmp
    else:
        filename = url.split('/')[-1]
        
    Protocol = get_download_protocol(url)

    filesize = Protocol.get_file_size(url, option.user, option.password)
        
    print "file: ",filename," size:",filesize,"bytes"

    chunks = option.chunks
    chunk = filesize / chunks

    # create the pair (position, # bytes to download)
    pos = 0
    lpairs = []
    for i in range(chunks):
        if i==chunks-1:
            lpairs.append((pos, pos+rem-1))
        else:
            lpairs.append((pos, pos+chunk-1))
            pos = pos + chunk
            rem = filesize - pos

    #create the progress bar
    progressbar = ProgressBar(lpairs)

    threads = []
    for i,(first,last) in enumerate(lpairs):
        d = Protocol(url,first,last,i,progressbar,option.user,option.password,filename)
        down_instances.append(d)
        threads.append(Thread(target=d.download,name="postzilla-"+str(i)))
        threads[i].start()

    # waiting for the threads to finish. We need to do all this work because
    # of the Python Bug #1167930 where the join is not interruptible by a
    # [Ctrl-c] signal. The more seconds, the better.
    runningThreads = threads
    while len(runningThreads) > 0:
        try:
            for t in threads:
                t.join(1000000.0)
            
            runningThreads = [t for t in threads if t.isAlive()]
        except InterruptedException:
            interrupted = True

            # making the threads stop
            for d in down_instances:
                d.must_stop()
        except:
            pass

    #finalizing the progressbar
    progressbar.finalize(interrupted)

    if(interrupted):
        print "Deleting temporal file..."
        os.remove(filename)

def stop_download(signum, frame):
    print "\nDownload finishing..."
                
    raise InterruptedException

#### Argument parsing #############################################################################
if __name__ == '__main__':
    parser = OptionParser(usage="%prog [-t <number of threads>] [-o <output file>] [-u <user>] [-p <password>] <url>",
                          version="%prog 0.1")

    #number of threads option
    parser.add_option("-t", "--threads", dest="chunks",
                      action="store", type="int", default=8,
                      help="number of threads to be used in the download")

    #output file
    parser.add_option("-o", "--output", dest="output",
                      action="store", type="string", default="",
                      help="output file where the downloaded data will be placed")

    #user(auth)
    parser.add_option("-u", "--user", dest="user",
                      action="store", type="string", default="",
                      help="user to make the ftp/http authentication")
    #password(auth)
    parser.add_option("-p", "--password", dest="password",
                      action="store", type="string", default="",
                      help="password to make the ftp/http authentication")
    
    (option, args) = parser.parse_args()

    if len(args)!=1:
        parser.error("You most supply a url")

    # setting the signal handler
    signal.signal(signal.SIGINT, stop_download)
        
    main(option, args[0])
